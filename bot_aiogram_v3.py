
import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from dotenv import load_dotenv


API_TOKEN = os.environ.get("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

USERS_FILE = "users.json"

def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="üî• –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é —Å—Ö–µ–º—É")],
        [
            types.KeyboardButton(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
            types.KeyboardButton(text="‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏")
        ]
    ])
    return keyboard

@dp.message(CommandStart())
async def start_cmd(message: Message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id not in users:
        users[user_id] = True
        save_users(users)
        await message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–í–æ—Ç —Ç–≤–æ—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "üëâ https://casinoactionplay.com/FKMF\n\n"
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=main_keyboard()
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å—Ö–µ–º—É.\n\n"
            "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ö–µ–º—ã üëá",
            reply_markup=main_keyboard()
        )

@dp.message(lambda msg: msg.text == "üî• –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é —Å—Ö–µ–º—É")
async def paid_scheme(message: Message):
    await message.answer(
        "üîê –ü–ª–∞—Ç–Ω–∞—è —Å—Ö–µ–º–∞ ‚Äî —ç—Ç–æ:\n"
        "- –ü–æ–ª–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω\n"
        "- –§–∏–ª—å—Ç—Ä –æ—Ç —Ö–∞–ª—è–≤—â–∏–∫–æ–≤\n"
        "- –¢–≤–æ—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "üëâ –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–°, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë: @your_username"
    )

@dp.message(lambda msg: msg.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_review(message: Message):
    await message.answer("üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø—Ä—è–º–æ —Å—é–¥–∞: @your_username")

@dp.message(lambda msg: msg.text == "‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏")
async def faq_handler(message: Message):
    await message.answer(
        "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—â—å:\n"
        "1. –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞? –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å VPN.\n"
        "2. –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ? –ù–∞–ø–∏—à–∏ –º–Ω–µ: @your_username\n\n"
        "–ò–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –ø–æ–º–æ—â–Ω–∏–∫–∞: @faq_helper_bot"
    )


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
